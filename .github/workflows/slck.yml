name: Java CI with Maven SM Regression and Slack Notification

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-tests:
    #    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature:
          - "regression_T005d_IEP_Initial_Referral20"
          - "regression_T005d_IEP_Initial_Referral19"
          - "regression_T005d_IEP_Initial_Referral18"
          - "regression_T005d_IEP_Initial_Referral17"
          - "regression_T005d_IEP_Initial_Referral16"
          - "regression_T005d_IEP_Initial_Referral15"
          - "regression_T005d_IEP_Initial_Referral14"
          - "regression_T005d_IEP_Initial_Referral13"
          - "regression_T005d_IEP_Initial_Referral12"
          - "regression_T005d_IEP_Initial_Referral11"
          - "regression_T005d_IEP_Initial_Referral10"
          - "regression_T005d_IEP_Initial_Referral9"
          - "regression_T005d_IEP_Initial_Referral8"
          - "regression_T005d_IEP_Initial_Referral7"
          - "regression_T005d_IEP_Initial_Referral6"
          - "regression_T005d_IEP_Initial_Referral5"
          - "regression_T005d_IEP_Initial_Referral4"
          - "regression_T005d_IEP_Initial_Referral3"
          - "regression_T005d_IEP_Initial_Referral2"
          - "regression_T005d_IEP_Initial_Referral1"
          - "regression_T005d_IEP_Initial_Referral21"
          # Add all feature tags here excluding @

    steps:
      - name: Cancel Previous Runs
        if: github.event_name == 'pull_request'
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Record Start Time
        id: record-start-time
        run: |
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV
          echo "Start time: $START_TIME"

      - name: Build with Maven
        id: tests
        run: |
          mkdir -p combined-allure-results
          mkdir -p combined-cucumber-reports
          mvn clean -D surefire.rerunFailingTestsCount=2 test -D cucumber.filter.tags=@${{ matrix.feature }} -X
          cp -r target/allure-results/* combined-allure-results/
          cp -r target/cucumber-reports/* combined-cucumber-reports/
          sleep 10  # Adding a wait statement to ensure all files are copied

      - name: Publish Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.feature }}
          path: combined-allure-results/

      - name: Publish Cucumber Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cucumber-results-${{ matrix.feature }}
          path: combined-cucumber-reports/

      - name: Upload Cucumber XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cucumber_${{ matrix.feature }}
          path: artifacts/cucumber_${{ matrix.feature }}

  merge-artifacts:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      - uses: actions/checkout@v2

      - name: Download Allure Results
        run: |
          mkdir -p final-allure-results
          for artifact in $(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name | startswith("allure-results-")) | .archive_download_url'); do
              curl -L -o artifact.zip "$artifact" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
              unzip -o artifact.zip -d final-allure-results
              sleep 10  # Increasing wait time to ensure all files are processed
              echo "Downloaded and unzipped $artifact"
          done

      - name: Check Allure Results Directory
        run: |
          echo "Contents of final-allure-results:"
          ls -la final-allure-results

      - name: Download Cucumber Results
        run: |
          mkdir -p final-cucumber-results
          for artifact in $(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name | startswith("cucumber-results-")) | .archive_download_url'); do
              curl -L -o artifact.zip "$artifact" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
              unzip -o artifact.zip -d final-cucumber-results
              sleep 10  # Increasing wait time to ensure all files are processed
              echo "Downloaded and unzipped $artifact"
          done

      - name: Check Cucumber Results Directory
        run: |
          echo "Contents of final-cucumber-results:"
          ls -la final-cucumber-results

      - name: Merge Allure Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: sm-merged-artifacts-allure

      - name: Check Merged Results
        run: |
          echo "Contents of final-allure-results:"
          ls final-allure-results
          echo "Contents of final-cucumber-results:"
          ls final-cucumber-results
          # Remove unwanted file if present
          if [ -f final-allure-results/io.cucumber.core.plugin.JUnitFormatter ]; then
            echo "Removing unwanted file: io.cucumber.core.plugin.JUnitFormatter"
            rm final-allure-results/io.cucumber.core.plugin.JUnitFormatter
          fi

      - name: Upload Merged Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-allure-results
          path: final-allure-results/

      - name: Upload Merged Cucumber Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-cucumber-results
          path: final-cucumber-results/

  aggregate-and-send-report:
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' }}
    runs-on: ubuntu-latest
    needs: merge-artifacts
    steps:
      - name: Wait for Artifacts to be Uploaded
        run: sleep 5  # Wait for 5 seconds before starting

      - name: Download all Cucumber XML files
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded files
        run: |
          echo "Listing contents of ./artifacts directory:"
          ls -l ./artifacts

      - name: Print XML Contents
        run: |
          for dir in ./artifacts/cucumber_*; do
            if [ -d "$dir" ]; then
              echo "Contents of $dir:"
              cat "$dir/cucumber.xml"
            else
              echo "Directory $dir not found"
            fi
          done

      - name: Parse Cucumber XML and Aggregate Results
        id: aggregate-results
        run: |
          passed=0
          failed=0
          feature_files_run=0
          for dir in ./artifacts/cucumber_*; do
            if [ -d "$dir" ]; then
              echo "Parsing $dir/cucumber.xml"
              feature_files_run=$((feature_files_run + 1))
              tests=$(grep -oP '(?<=tests=")[^"]*' "$dir/cucumber.xml")
              errors=$(grep -oP '(?<=errors=")[^"]*' "$dir/cucumber.xml")
              failures=$(grep -oP '(?<=failures=")[^"]*' "$dir/cucumber.xml")
              passed=$((passed + tests - errors - failures))
              failed=$((failed + errors + failures))
            else
              echo "Directory $dir not found"
            fi
          done
          total=$((passed + failed))
          if [ $total -eq 0 ]; then
            pass_percentage=0
          else
            pass_percentage=$((100 * passed / total))
          fi
          echo "FEATURE_FILES_RUN=$feature_files_run" >> $GITHUB_ENV
          echo "PASSED=$passed" >> $GITHUB_ENV
          echo "FAILED=$failed" >> $GITHUB_ENV
          echo "PASS_PERCENTAGE=$pass_percentage" >> $GITHUB_ENV

      - name: Record End Time
        id: end-time
        run: echo "END_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Calculate Duration and Format Time in IST
        id: duration
        run: |
          START_TIME=${{ env.START_TIME }}
          END_TIME=${{ env.END_TIME }}
          TOTAL_DURATION=$((END_TIME - START_TIME))
          total_hours=$((TOTAL_DURATION / 3600))
          total_minutes=$(( (TOTAL_DURATION % 3600) / 60 ))
          total_seconds=$((TOTAL_DURATION % 60))
          total_time_formatted=$(printf "%02d:%02d:%02d" $total_hours $total_minutes $total_seconds)
          # Convert END_TIME to IST
          finished_date_ist=$(TZ=Asia/Kolkata date -d "@$END_TIME" +"%Y-%m-%d")
          finished_time_ist=$(TZ=Asia/Kolkata date -d "@$END_TIME" +"%H:%M:%S")
          echo "TOTAL_TIME=$total_time_formatted" >> $GITHUB_ENV
          echo "FINISHED_DATE_IST=$finished_date_ist" >> $GITHUB_ENV
          echo "FINISHED_TIME_IST=$finished_time_ist" >> $GITHUB_ENV
      - name: Send Slack Notification
        run: |
          summary=$(cat <<-EOF
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "SM Build Summary"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Feature Files Run:*\n${{ env.FEATURE_FILES_RUN }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Passed Tests:*\n${{ env.PASSED }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Failed Tests:*\n${{ env.FAILED }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Pass Percentage:*\n${{ env.PASS_PERCENTAGE }}%"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Finished Date and Time:*\n${{ env.FINISHED_DATE_IST }} ${{ env.FINISHED_TIME_IST }}"
                  }
                ]
              },
              {
                "type": "divider"
              }
            ]
          }
          EOF
          )
          curl -X POST -H 'Content-type: application/json' --data "$summary" $SLACK_WEBHOOK_URL
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}